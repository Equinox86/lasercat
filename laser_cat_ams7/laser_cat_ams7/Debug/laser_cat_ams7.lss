
laser_cat_ams7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  0000055e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000839  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f9  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ab  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  00001dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 28 01 	call	0x250	; 0x250 <main>
  9e:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_14>:


uint8_t position = 95;


ISR(TIMER0_COMPA_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
	counter ++; 
  ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <counter>
  be:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <counter+0x1>
  c2:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <counter+0x2>
  c6:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <counter+0x3>
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	a1 1d       	adc	r26, r1
  ce:	b1 1d       	adc	r27, r1
  d0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <counter>
  d4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <counter+0x1>
  d8:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <counter+0x2>
  dc:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <counter+0x3>
 	if(counter >= 10000){
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	97 42       	sbci	r25, 0x27	; 39
  e4:	a1 05       	cpc	r26, r1
  e6:	b1 05       	cpc	r27, r1
  e8:	08 f4       	brcc	.+2      	; 0xec <__vector_14+0x46>
  ea:	79 c0       	rjmp	.+242    	; 0x1de <__vector_14+0x138>
		if(active){// ---- Active Operation
  ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <active>
  f0:	88 23       	and	r24, r24
  f2:	d1 f1       	breq	.+116    	; 0x168 <__vector_14+0xc2>
			PORTB^=(1<<5); // LED
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	89 27       	eor	r24, r25
  fa:	85 b9       	out	0x05, r24	; 5
			move_servo = true;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <move_servo>
		
			//Manage Runtime. Activate will decrement until 0.
			if(activate > 0) {
 102:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <activate>
 106:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <activate+0x1>
 10a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <activate+0x2>
 10e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <activate+0x3>
 112:	89 2b       	or	r24, r25
 114:	8a 2b       	or	r24, r26
 116:	8b 2b       	or	r24, r27
 118:	a1 f0       	breq	.+40     	; 0x142 <__vector_14+0x9c>
				activate --;
 11a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <activate>
 11e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <activate+0x1>
 122:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <activate+0x2>
 126:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <activate+0x3>
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	a1 09       	sbc	r26, r1
 12e:	b1 09       	sbc	r27, r1
 130:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <activate>
 134:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <activate+0x1>
 138:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <activate+0x2>
 13c:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <activate+0x3>
 140:	46 c0       	rjmp	.+140    	; 0x1ce <__vector_14+0x128>
			} else { 
				activate = 7200; //2 hour between operation
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	9c e1       	ldi	r25, 0x1C	; 28
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <activate>
 14e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <activate+0x1>
 152:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <activate+0x2>
 156:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <activate+0x3>
				active = false;	
 15a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <active>
				PORTB ^= (1<<4);
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	89 27       	eor	r24, r25
 164:	85 b9       	out	0x05, r24	; 5
 166:	33 c0       	rjmp	.+102    	; 0x1ce <__vector_14+0x128>
			}

		} else {// ---- Inactive Operation
			 if(activate > 0) { 
 168:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <activate>
 16c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <activate+0x1>
 170:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <activate+0x2>
 174:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <activate+0x3>
 178:	89 2b       	or	r24, r25
 17a:	8a 2b       	or	r24, r26
 17c:	8b 2b       	or	r24, r27
 17e:	a1 f0       	breq	.+40     	; 0x1a8 <__vector_14+0x102>
				activate --;
 180:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <activate>
 184:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <activate+0x1>
 188:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <activate+0x2>
 18c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <activate+0x3>
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	a1 09       	sbc	r26, r1
 194:	b1 09       	sbc	r27, r1
 196:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <activate>
 19a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <activate+0x1>
 19e:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <activate+0x2>
 1a2:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <activate+0x3>
 1a6:	13 c0       	rjmp	.+38     	; 0x1ce <__vector_14+0x128>
			 } else {
				activate = 60;//1 minute operation
 1a8:	8c e3       	ldi	r24, 0x3C	; 60
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	a0 e0       	ldi	r26, 0x00	; 0
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <activate>
 1b4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <activate+0x1>
 1b8:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <activate+0x2>
 1bc:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <activate+0x3>
				active = true;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <active>
				PORTB ^= (1<<4);
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	89 27       	eor	r24, r25
 1cc:	85 b9       	out	0x05, r24	; 5
			 }
		}

		counter= 0;
 1ce:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <counter>
 1d2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter+0x1>
 1d6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter+0x2>
 1da:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <counter+0x3>
	}
}
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <_Z10init_servov>:
void init_servo() {
	//Set the output
	DDRB |= (1<<2); // set OC1B as output
 1f2:	22 9a       	sbi	0x04, 2	; 4
	TCCR1A |= (1<< COM1B1); //Output compare on OC1B
 1f4:	e0 e8       	ldi	r30, 0x80	; 128
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 83       	st	Z, r24
	TCCR1A |= (1<< WGM10) | (1<< WGM11);
 1fe:	80 81       	ld	r24, Z
 200:	83 60       	ori	r24, 0x03	; 3
 202:	80 83       	st	Z, r24
	TCCR1B |= (1<< WGM12) | (1<< WGM13);; // use fast PWM mode
 204:	e1 e8       	ldi	r30, 0x81	; 129
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 61       	ori	r24, 0x18	; 24
 20c:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12); // turn the timer on, use prescaler 256
 20e:	80 81       	ld	r24, Z
 210:	84 60       	ori	r24, 0x04	; 4
 212:	80 83       	st	Z, r24
	
	// set the frequency of pulses to 50Hz; (1/50) = 20ms; 
	//(1/(16,000,000/256))*1000 = 0.016ms per pulse. 
	//OCR1A = (20 ms/.016 ms/clck_pulse) = 1250 clck_pulse; 
	OCR1A = 1250;
 214:	82 ee       	ldi	r24, 0xE2	; 226
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 21c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Center the Servo; at 1.5ms ; 94 * .016 =1.504
	OCR1B = position; 
 220:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <position>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 22a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 22e:	08 95       	ret

00000230 <_Z10init_timerv>:
	//.8ms min = 50 (4% Duty Cycle) 
	// 2ms Max = 125 (10% Duty Cycle); 
	// (2  - .8) / 165 = .45 degrees per DC unit
}
void init_timer(){ 
	TCNT0 = 0; //Set Counter to 0;
 230:	16 bc       	out	0x26, r1	; 38
	DDRB |= (1<<5); 
 232:	25 9a       	sbi	0x04, 5	; 4
	TCCR0A |= (1<<WGM01); //CTC Mode
 234:	84 b5       	in	r24, 0x24	; 36
 236:	82 60       	ori	r24, 0x02	; 2
 238:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);// | 8 prescaler
 23a:	85 b5       	in	r24, 0x25	; 37
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	85 bd       	out	0x25, r24	; 37
	TIMSK0|= (1<<OCIE0A); // Interrupt Service Routine COMPA
 240:	ee e6       	ldi	r30, 0x6E	; 110
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	82 60       	ori	r24, 0x02	; 2
 248:	80 83       	st	Z, r24
	
	//Each Overflow is work .1ms : ((1/(16,000,000clk/8 prescale)) * 1000 us to ms) * 200 Overflows =.1ms
	OCR0A = 199;
 24a:	87 ec       	ldi	r24, 0xC7	; 199
 24c:	87 bd       	out	0x27, r24	; 39
 24e:	08 95       	ret

00000250 <main>:
}
int main(void)
{

	sei();
 250:	78 94       	sei
	init_servo();
 252:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z10init_servov>
	init_timer(); 
 256:	0e 94 18 01 	call	0x230	; 0x230 <_Z10init_timerv>
	
	//Laser pin
	DDRB |= (1<<4); 
 25a:	24 9a       	sbi	0x04, 4	; 4
		if(move_servo){
			if(dir){
				nextpos = rand()%20 + 75;
				dir = !dir;
			} else {
				nextpos = rand()%20 + 95;
 25c:	04 e1       	ldi	r16, 0x14	; 20
 25e:	10 e0       	ldi	r17, 0x00	; 0
				dir = !dir;
 260:	ff 24       	eor	r15, r15
 262:	f3 94       	inc	r15
					position = position -1; 
				} else {
					position = position + 1;
				}
				_delay_ms(10);
				OCR1B = position;
 264:	ca e8       	ldi	r28, 0x8A	; 138
 266:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB |= (1<<4); 
	
	uint8_t nextpos;
	while (true) 
    {	
		if(move_servo){
 268:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <move_servo>
 26c:	88 23       	and	r24, r24
 26e:	e1 f3       	breq	.-8      	; 0x268 <main+0x18>
			if(dir){
 270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 274:	88 23       	and	r24, r24
 276:	61 f0       	breq	.+24     	; 0x290 <main+0x40>
				nextpos = rand()%20 + 75;
 278:	0e 94 ed 01 	call	0x3da	; 0x3da <rand>
 27c:	b8 01       	movw	r22, r16
 27e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__divmodhi4>
 282:	85 5b       	subi	r24, 0xB5	; 181
				dir = !dir;
 284:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 288:	9f 25       	eor	r25, r15
 28a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <main+0x56>
			} else {
				nextpos = rand()%20 + 95;
 290:	0e 94 ed 01 	call	0x3da	; 0x3da <rand>
 294:	b8 01       	movw	r22, r16
 296:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__divmodhi4>
 29a:	81 5a       	subi	r24, 0xA1	; 161
				dir = !dir;
 29c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 2a0:	9f 25       	eor	r25, r15
 2a2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
			} 
			while(position != nextpos){
 2a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <position>
 2aa:	89 17       	cp	r24, r25
 2ac:	f9 f0       	breq	.+62     	; 0x2ec <main+0x9c>
				int delta= position - nextpos; 
				if(delta > 0) {
 2ae:	48 2f       	mov	r20, r24
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	29 2f       	mov	r18, r25
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	24 1b       	sub	r18, r20
 2b8:	35 0b       	sbc	r19, r21
 2ba:	12 16       	cp	r1, r18
 2bc:	13 06       	cpc	r1, r19
 2be:	24 f4       	brge	.+8      	; 0x2c8 <main+0x78>
					position = position -1; 
 2c0:	91 50       	subi	r25, 0x01	; 1
 2c2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <position>
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <main+0x7e>
				} else {
					position = position + 1;
 2c8:	9f 5f       	subi	r25, 0xFF	; 255
 2ca:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <position>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	ef e3       	ldi	r30, 0x3F	; 63
 2d0:	fc e9       	ldi	r31, 0x9C	; 156
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x82>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x88>
 2d8:	00 00       	nop
				}
				_delay_ms(10);
				OCR1B = position;
 2da:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <position>
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	39 83       	std	Y+1, r19	; 0x01
 2e2:	28 83       	st	Y, r18
				dir = !dir;
			} else {
				nextpos = rand()%20 + 95;
				dir = !dir;
			} 
			while(position != nextpos){
 2e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <position>
 2e8:	98 13       	cpse	r25, r24
 2ea:	e3 cf       	rjmp	.-58     	; 0x2b2 <main+0x62>
					position = position + 1;
				}
				_delay_ms(10);
				OCR1B = position;
			}
			move_servo = false;
 2ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <move_servo>
 2f0:	bb cf       	rjmp	.-138    	; 0x268 <main+0x18>

000002f2 <__divmodhi4>:
 2f2:	97 fb       	bst	r25, 7
 2f4:	07 2e       	mov	r0, r23
 2f6:	16 f4       	brtc	.+4      	; 0x2fc <__divmodhi4+0xa>
 2f8:	00 94       	com	r0
 2fa:	07 d0       	rcall	.+14     	; 0x30a <__divmodhi4_neg1>
 2fc:	77 fd       	sbrc	r23, 7
 2fe:	09 d0       	rcall	.+18     	; 0x312 <__divmodhi4_neg2>
 300:	0e 94 8d 01 	call	0x31a	; 0x31a <__udivmodhi4>
 304:	07 fc       	sbrc	r0, 7
 306:	05 d0       	rcall	.+10     	; 0x312 <__divmodhi4_neg2>
 308:	3e f4       	brtc	.+14     	; 0x318 <__divmodhi4_exit>

0000030a <__divmodhi4_neg1>:
 30a:	90 95       	com	r25
 30c:	81 95       	neg	r24
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	08 95       	ret

00000312 <__divmodhi4_neg2>:
 312:	70 95       	com	r23
 314:	61 95       	neg	r22
 316:	7f 4f       	sbci	r23, 0xFF	; 255

00000318 <__divmodhi4_exit>:
 318:	08 95       	ret

0000031a <__udivmodhi4>:
 31a:	aa 1b       	sub	r26, r26
 31c:	bb 1b       	sub	r27, r27
 31e:	51 e1       	ldi	r21, 0x11	; 17
 320:	07 c0       	rjmp	.+14     	; 0x330 <__udivmodhi4_ep>

00000322 <__udivmodhi4_loop>:
 322:	aa 1f       	adc	r26, r26
 324:	bb 1f       	adc	r27, r27
 326:	a6 17       	cp	r26, r22
 328:	b7 07       	cpc	r27, r23
 32a:	10 f0       	brcs	.+4      	; 0x330 <__udivmodhi4_ep>
 32c:	a6 1b       	sub	r26, r22
 32e:	b7 0b       	sbc	r27, r23

00000330 <__udivmodhi4_ep>:
 330:	88 1f       	adc	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	5a 95       	dec	r21
 336:	a9 f7       	brne	.-22     	; 0x322 <__udivmodhi4_loop>
 338:	80 95       	com	r24
 33a:	90 95       	com	r25
 33c:	bc 01       	movw	r22, r24
 33e:	cd 01       	movw	r24, r26
 340:	08 95       	ret

00000342 <do_rand>:
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	68 81       	ld	r22, Y
 35a:	79 81       	ldd	r23, Y+1	; 0x01
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	9b 81       	ldd	r25, Y+3	; 0x03
 360:	61 15       	cp	r22, r1
 362:	71 05       	cpc	r23, r1
 364:	81 05       	cpc	r24, r1
 366:	91 05       	cpc	r25, r1
 368:	21 f4       	brne	.+8      	; 0x372 <do_rand+0x30>
 36a:	64 e2       	ldi	r22, 0x24	; 36
 36c:	79 ed       	ldi	r23, 0xD9	; 217
 36e:	8b e5       	ldi	r24, 0x5B	; 91
 370:	97 e0       	ldi	r25, 0x07	; 7
 372:	2d e1       	ldi	r18, 0x1D	; 29
 374:	33 ef       	ldi	r19, 0xF3	; 243
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__divmodsi4>
 37e:	49 01       	movw	r8, r18
 380:	5a 01       	movw	r10, r20
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	a7 ea       	ldi	r26, 0xA7	; 167
 388:	b1 e4       	ldi	r27, 0x41	; 65
 38a:	0e 94 1c 02 	call	0x438	; 0x438 <__muluhisi3>
 38e:	6b 01       	movw	r12, r22
 390:	7c 01       	movw	r14, r24
 392:	ac ee       	ldi	r26, 0xEC	; 236
 394:	b4 ef       	ldi	r27, 0xF4	; 244
 396:	a5 01       	movw	r20, r10
 398:	94 01       	movw	r18, r8
 39a:	0e 94 2a 02 	call	0x454	; 0x454 <__mulohisi3>
 39e:	dc 01       	movw	r26, r24
 3a0:	cb 01       	movw	r24, r22
 3a2:	8c 0d       	add	r24, r12
 3a4:	9d 1d       	adc	r25, r13
 3a6:	ae 1d       	adc	r26, r14
 3a8:	bf 1d       	adc	r27, r15
 3aa:	b7 ff       	sbrs	r27, 7
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <do_rand+0x72>
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b0 48       	sbci	r27, 0x80	; 128
 3b4:	88 83       	st	Y, r24
 3b6:	99 83       	std	Y+1, r25	; 0x01
 3b8:	aa 83       	std	Y+2, r26	; 0x02
 3ba:	bb 83       	std	Y+3, r27	; 0x03
 3bc:	9f 77       	andi	r25, 0x7F	; 127
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	cf 90       	pop	r12
 3ca:	bf 90       	pop	r11
 3cc:	af 90       	pop	r10
 3ce:	9f 90       	pop	r9
 3d0:	8f 90       	pop	r8
 3d2:	08 95       	ret

000003d4 <rand_r>:
 3d4:	0e 94 a1 01 	call	0x342	; 0x342 <do_rand>
 3d8:	08 95       	ret

000003da <rand>:
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 a1 01 	call	0x342	; 0x342 <do_rand>
 3e2:	08 95       	ret

000003e4 <srand>:
 3e4:	a0 e0       	ldi	r26, 0x00	; 0
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3f0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3f4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3f8:	08 95       	ret

000003fa <__divmodsi4>:
 3fa:	05 2e       	mov	r0, r21
 3fc:	97 fb       	bst	r25, 7
 3fe:	1e f4       	brtc	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	00 94       	com	r0
 402:	0e 94 14 02 	call	0x428	; 0x428 <__negsi2>
 406:	57 fd       	sbrc	r21, 7
 408:	07 d0       	rcall	.+14     	; 0x418 <__divmodsi4_neg2>
 40a:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodsi4>
 40e:	07 fc       	sbrc	r0, 7
 410:	03 d0       	rcall	.+6      	; 0x418 <__divmodsi4_neg2>
 412:	4e f4       	brtc	.+18     	; 0x426 <__divmodsi4_exit>
 414:	0c 94 14 02 	jmp	0x428	; 0x428 <__negsi2>

00000418 <__divmodsi4_neg2>:
 418:	50 95       	com	r21
 41a:	40 95       	com	r20
 41c:	30 95       	com	r19
 41e:	21 95       	neg	r18
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	4f 4f       	sbci	r20, 0xFF	; 255
 424:	5f 4f       	sbci	r21, 0xFF	; 255

00000426 <__divmodsi4_exit>:
 426:	08 95       	ret

00000428 <__negsi2>:
 428:	90 95       	com	r25
 42a:	80 95       	com	r24
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__muluhisi3>:
 438:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__umulhisi3>
 43c:	a5 9f       	mul	r26, r21
 43e:	90 0d       	add	r25, r0
 440:	b4 9f       	mul	r27, r20
 442:	90 0d       	add	r25, r0
 444:	a4 9f       	mul	r26, r20
 446:	80 0d       	add	r24, r0
 448:	91 1d       	adc	r25, r1
 44a:	11 24       	eor	r1, r1
 44c:	08 95       	ret

0000044e <__mulshisi3>:
 44e:	b7 ff       	sbrs	r27, 7
 450:	0c 94 1c 02 	jmp	0x438	; 0x438 <__muluhisi3>

00000454 <__mulohisi3>:
 454:	0e 94 1c 02 	call	0x438	; 0x438 <__muluhisi3>
 458:	82 1b       	sub	r24, r18
 45a:	93 0b       	sbc	r25, r19
 45c:	08 95       	ret

0000045e <__udivmodsi4>:
 45e:	a1 e2       	ldi	r26, 0x21	; 33
 460:	1a 2e       	mov	r1, r26
 462:	aa 1b       	sub	r26, r26
 464:	bb 1b       	sub	r27, r27
 466:	fd 01       	movw	r30, r26
 468:	0d c0       	rjmp	.+26     	; 0x484 <__udivmodsi4_ep>

0000046a <__udivmodsi4_loop>:
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	ee 1f       	adc	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	a2 17       	cp	r26, r18
 474:	b3 07       	cpc	r27, r19
 476:	e4 07       	cpc	r30, r20
 478:	f5 07       	cpc	r31, r21
 47a:	20 f0       	brcs	.+8      	; 0x484 <__udivmodsi4_ep>
 47c:	a2 1b       	sub	r26, r18
 47e:	b3 0b       	sbc	r27, r19
 480:	e4 0b       	sbc	r30, r20
 482:	f5 0b       	sbc	r31, r21

00000484 <__udivmodsi4_ep>:
 484:	66 1f       	adc	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	1a 94       	dec	r1
 48e:	69 f7       	brne	.-38     	; 0x46a <__udivmodsi4_loop>
 490:	60 95       	com	r22
 492:	70 95       	com	r23
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	bd 01       	movw	r22, r26
 49e:	cf 01       	movw	r24, r30
 4a0:	08 95       	ret

000004a2 <__umulhisi3>:
 4a2:	a2 9f       	mul	r26, r18
 4a4:	b0 01       	movw	r22, r0
 4a6:	b3 9f       	mul	r27, r19
 4a8:	c0 01       	movw	r24, r0
 4aa:	a3 9f       	mul	r26, r19
 4ac:	70 0d       	add	r23, r0
 4ae:	81 1d       	adc	r24, r1
 4b0:	11 24       	eor	r1, r1
 4b2:	91 1d       	adc	r25, r1
 4b4:	b2 9f       	mul	r27, r18
 4b6:	70 0d       	add	r23, r0
 4b8:	81 1d       	adc	r24, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	91 1d       	adc	r25, r1
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
